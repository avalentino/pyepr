# AppVeyor.com is a Continuous Integration service to build and run tests under
# Windows
#
# See also: https://github.com/astropy/astropy/blob/master/appveyor.yml

environment:

  global:
    PYTHON: "C:\\conda"
    MINICONDA_VERSION: "latest"
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\ci-helpers\\appveyor\\windows_sdk.cmd"
    PYTHON_ARCH: "64" # needs to be set for CMD_IN_ENV to succeed. If a mix
                      # of 32 bit and 64 bit builds are needed, move this
                      # to the matrix section.
    CONDA_DEPENDENCIES: "setuptools numpy Cython unittest2"
    # DEBUG: True
    # NUMPY_VERSION: "stable"

  matrix:
    - PYTHON: "C:\\Miniconda-x64"
      PYTHON_VERSION: "2.7"

    - PYTHON: "C:\\Miniconda36-x64"
      PYTHON_VERSION: "3.6"

    - PYTHON: "C:\\Miniconda37-x64"
      PYTHON_VERSION: "3.7"

platform:
    -x64

install:
     # Set up ci-helpers
    - "git clone git://github.com/astropy/ci-helpers.git"
    - "powershell ci-helpers/appveyor/install-miniconda.ps1"
    - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
    - "activate test"

    # epr-api
    - "git clone -b pyepr https://github.com/avalentino/epr-api.git"

# Not a .NET project, we build the python package in the install step instead
build: false

test_script:
  # Build the compiled extension and run the project tests
  - "%CMD_IN_ENV% python setup.py --epr-api-src=epr-api\\src test"

after_test:
  # If tests are successful, create a whl package for the project.
  - "%CMD_IN_ENV% python setup.py --epr-api-src=epr-api\\src bdist_wheel"

artifacts:
  # Archive the generated wheel package in the ci.appveyor.com build report.
  - path: dist\*

#on_success:
#  - TODO: upload the content of dist/*.whl to a public wheelhouse
